
Требуется реализовать сервер, обрабатывающий два запроса.
List — листинг файлов в директории на сервере
Get — скачивание файла с сервера
Сервер должен иметь возможность обслуживать несколько клиентов одновременно (например, в ситуации, когда три клиента одновременно скачивают большой файл).

Также необходимо реализовать клиент, для которого нужно:
иметь возможность задать адрес и порт сервера;
при подключении получить список файлов и подпапок папки, на которую "смотрит" сервер;
иметь возможность перемещаться по папкам (переходить в подпапки и возвращаться на уровень выше, если он есть — выходить выше "корневой" папки нельзя);
иметь возможность указать папку в файловой системе клиента для скачивания файлов;
иметь возможность скачать один файл или все файлы в текущей папке сразу;
при этом скачивание нескольких файлов должно происходить параллельно.

List, формат запроса:
<1: Int> <path: String>
path — путь к директории относительно того места, где запущен сервер
Например, "1 ./Test/Files".

Формат ответа:
<size: Int> (<name: String> <isDir: Boolean>)*,
size — количество файлов и папок в директории
name — название файла или папки
isDir — флаг, принимающий значение True для директорий
Например, "2 ./Test/files/file1.txt false ./Test/files/directory true"

Если директории не существует, сервер посылает ответ с size = -1

Get, формат запроса:
<2: Int> <path: String>
path — путь к файлу

Формат ответа:
<size: Long> <content: Bytes>,
size — размер файла,
content — его содержимое

Если файла не существует, сервер посылает ответ с size = -1
Обратите внимание на строгое следование протоколу. Сервер любого правильного решения должен уметь взаимодействовать с клиентом любого другого правильного решения (в частности клиент из любого вашего решения должен быть совместим с сервером любого вашего решения).


Решение задачи оценивается по шкале от 0 (нет решения или решение имеет существенные недостатки) до 15 (решение работоспособно, аккуратно реализовано, отсутствуют ошибки многопоточного программирования).

